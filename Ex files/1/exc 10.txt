exc 10

[21badl04@mepcolinux b]$cat 10.prn
Script started on Wed 16 Oct 2024 02:44:15 PM IST
[21badl04@mepcolinux b]$cat exc10
from pyspark.sql import SparkSession
from pyspark.sql.functions import *
from pyspark.ml.regression import LinearRegression
from pyspark.ml.recommendation import ALS
from pyspark.ml.feature import VectorAssembler
from pyspark.sql.streaming import DataStreamWriter

# Initialize Spark Session
spark = SparkSession.builder.appName("RealTimeAnalytics").getOrCreate()

# Read stream from Kafka
df = spark.readStream.format("kafka").option("kafka.bootstrap.servers", "localhost:9092").option("subscribe", "your_topic").load()

# Convert the value column from Kafka from binary to string
df = df.selectExpr("CAST(value AS STRING)")

# Preprocess your data
data = df.withColumn("value", split(col("value"), ",")) \
    .select(col("value").getItem(0).cast("int").alias("userId"),
            col("value").getItem(1).cast("int").alias("itemId"),
            col("value").getItem(2).cast("float").alias("rating"),
            col("value").getItem(3).cast("float").alias("feature1"),
            col("value").getItem(4).cast("float").alias("feature2"))

# Create features column for Linear Regression
assembler = VectorAssembler(inputCols=["feature1", "feature2"], outputCol="features")
data = assembler.transform(data)

# Split the data into training and test sets
train, test = data.randomSplit([0.8, 0.2], seed=12345)

# Linear Regression model
lr = LinearRegression(featuresCol='features', labelCol='rating')
lr_model = lr.fit(train)

# Make predictions
lr_predictions = lr_model.transform(test)

# ALS model for Collaborative Filtering
als = ALS(userCol="userId", itemCol="itemId", ratingCol="rating", coldStartStrategy="drop")
als_model = als.fit(train)

# Make ALS predictions
als_predictions = als_model.transform(test)

# Write the output stream
query: DataStreamWriter = als_predictions.select("userId", "itemId", "prediction") \
    .writeStream \
    .outputMode("append") \
    .format("console") \
    .start()

query.awaitTermination()


+--------+--------+-----+---------+--------------------+--------------------+----------+
|feature1|feature2|label| features|       rawPrediction|         probability|prediction|
+--------+--------+-----+---------+--------------------+--------------------+----------+
|     4.5|     2.3|  1.0|[4.5,2.3]|[-18.930260066393...|[6.00748243359491...|       1.0|
|     5.1|     3.4|  0.0|[5.1,3.4]|[18.9302600641093...|[0.99999999399251...|       0.0|
|     6.7|     2.5|  1.0|[6.7,2.5]|[53.9225589726047...|           [1.0,0.0]|       0.0|
|     7.8|     4.1|  0.0|[7.8,4.1]|[116.162959490174...|           [1.0,0.0]|       0.0|
+--------+--------+-----+---------+--------------------+--------------------+----------+

+--------+--------+-----+---------+----------+
|feature1|feature2|label| features|prediction|
+--------+--------+-----+---------+----------+
|     4.5|     2.3|  1.0|[4.5,2.3]|         0|
|     5.1|     3.4|  0.0|[5.1,3.4]|         0|
|     6.7|     2.5|  1.0|[6.7,2.5]|         1|
|     7.8|     4.1|  0.0|[7.8,4.1]|         2|
+--------+--------+-----+---------+----------+
[21badl04@mepcolinux b]$exit
exit

Script done on Wed 16 Oct 2024 02:44:30 PM IST